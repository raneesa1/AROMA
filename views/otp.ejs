<!-- Coding by CodingLab || www.codinglabweb.com -->
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>OTP Verification Form</title>
    <link rel="stylesheet" href="/otpdev.css" />
    <!-- Boxicons CSS -->
    <link
      href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css"
      rel="stylesheet"
    />
    <script src="script.js" defer></script>
  </head>
  <body>
    <div class="container">
      <header>
        <i class="bx bxs-check-shield"></i>
      </header>
      <h4>Enter OTP Code</h4>
      <form method="POST" action="verify">
        <div class="input-field">
          <input type="number" name="otp1" />
          <input type="number" name="otp2" disabled />
          <input type="number" name="otp3" disabled />
          <input type="number" name="otp4" disabled />
          <input type="number" name="otp5" disabled />
          <input type="number" name="otp6" disabled />
        </div>
        <button>Verify OTP</button>
      </form>
      <div id="timer">1:00</div>
      <div id="resend-container" style="display: none">
        <button style="width: 130px;color: azure; background-color: black;"><a href="/resend">resend otp</a></button>
      </div>
    </div>
  </body>
</html>
<script>
  const inputs = document.querySelectorAll("input"),
    button = document.querySelector("button");

  let timerDisplay = document.getElementById("timer"),
    resendContainer = document.getElementById("resend-container");

  let timerSeconds = 60; // Initial timer value in seconds
  let timerInterval;

  function updateTimerDisplay() {
    const minutes = Math.floor(timerSeconds / 60);
    const seconds = timerSeconds % 60;
    timerDisplay.innerText = `${minutes}:${seconds < 10 ? "0" : ""}${seconds}`;
  }

  function startTimer() {
    timerInterval = setInterval(() => {
      if (timerSeconds <= 0) {
        clearInterval(timerInterval);
        // Timer has expired, show the resend button
        resendContainer.style.display = "block";
      } else {
        timerSeconds--;
        updateTimerDisplay();
      }
    }, 1000);
  }
  // iterate over all inputs
  inputs.forEach((input, index1) => {
    input.addEventListener("keyup", (e) => {
      // This code gets the current input element and stores it in the currentInput variable
      // This code gets the next sibling element of the current input element and stores it in the nextInput variable
      // This code gets the previous sibling element of the current input element and stores it in the prevInput variable
      const currentInput = input,
        nextInput = input.nextElementSibling,
        prevInput = input.previousElementSibling;

      // if the value has more than one character then clear it
      if (currentInput.value.length > 1) {
        currentInput.value = "";
        return;
      }
      // if the next input is disabled and the current value is not empty
      //  enable the next input and focus on it
      if (
        nextInput &&
        nextInput.hasAttribute("disabled") &&
        currentInput.value !== ""
      ) {
        nextInput.removeAttribute("disabled");
        nextInput.focus();
      }

      // if the backspace key is pressed
      if (e.key === "Backspace") {
        // iterate over all inputs again
        inputs.forEach((input, index2) => {
          // if the index1 of the current input is less than or equal to the index2 of the input in the outer loop
          // and the previous element exists, set the disabled attribute on the input and focus on the previous element
          if (index1 <= index2 && prevInput) {
            input.setAttribute("disabled", true);
            input.value = "";
            prevInput.focus();
          }
        });
      }
      //if the fourth input( which index number is 3) is not empty and has not disable attribute then
      //add active class if not then remove the active class.
      if (!inputs[3].disabled && inputs[3].value !== "") {
        button.classList.add("active");
        return;
      }
      button.classList.remove("active");
    });
  });
  window.addEventListener("load", () => {
    inputs[0].focus();
    startTimer();
  });
</script>
